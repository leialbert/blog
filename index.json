[{"content":"Installing the Packages from the Debian Repositories sudo apt update sudo apt install python3-venv python3-dev libpq-dev postgresql postgresql-contrib nginx curl Creating the PostgreSQL Database and User sudo -u postgres psql CREATE DATABASE myproject; CREATE USER myprojectuser WITH PASSWORD \u0026#39;password\u0026#39;; ALTER ROLE myprojectuser SET client_encoding TO \u0026#39;utf8\u0026#39;; ALTER ROLE myprojectuser SET default_transaction_isolation TO \u0026#39;read committed\u0026#39;; ALTER ROLE myprojectuser SET timezone TO \u0026#39;UTC\u0026#39;; GRANT ALL PRIVILEGES ON DATABASE myproject TO myprojectuser; \\q Creating a Python Virtual Environment for your Project mkdir ~/myprojectdir cd ~/myprojectdir python3 -m venv myprojectenv source myprojectenv/bin/activate pip install django gunicorn psycopg2-binary Creating and Configuring a New Django Project django-admin startproject myproject ~/myprojectdir nano ~/myprojectdir/myproject/settings.py . . . ALLOWED_HOSTS = [\u0026#39;your_server_domain_or_IP\u0026#39;, \u0026#39;second_domain_or_IP\u0026#39;, . . ., \u0026#39;localhost\u0026#39;] . . . DATABASES = { \u0026#39;default\u0026#39;: { \u0026#39;ENGINE\u0026#39;: \u0026#39;django.db.backends.postgresql_psycopg2\u0026#39;, \u0026#39;NAME\u0026#39;: \u0026#39;myproject\u0026#39;, \u0026#39;USER\u0026#39;: \u0026#39;myprojectuser\u0026#39;, \u0026#39;PASSWORD\u0026#39;: \u0026#39;password\u0026#39;, \u0026#39;HOST\u0026#39;: \u0026#39;localhost\u0026#39;, \u0026#39;PORT\u0026#39;: \u0026#39;\u0026#39;, } } . . . . . . STATIC_URL = \u0026#39;static/\u0026#39; # Default primary key field type # https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field DEFAULT_AUTO_FIELD = \u0026#39;django.db.models.BigAutoField\u0026#39; import os STATIC_ROOT = os.path.join(BASE_DIR, \u0026#39;static/\u0026#39;) ~/myprojectdir/manage.py makemigrations ~/myprojectdir/manage.py migrate ~/myprojectdir/manage.py createsuperuser ~/myprojectdir/manage.py collectstatic sudo ufw allow 8000 ~/myprojectdir/manage.py runserver 0.0.0.0:8000 Testing Gunicorn’s Ability to Serve the Project cd ~/myprojectdir gunicorn --bind 0.0.0.0:8000 myproject.wsgi Creating systemd Socket and Service Files for Gunicorn sudo nano /etc/systemd/system/gunicorn.socket ################################################### [Unit] Description=gunicorn socket [Socket] ListenStream=/run/gunicorn.sock [Install] WantedBy=sockets.target sudo nano /etc/systemd/system/gunicorn.service ################################################### [Unit] Description=gunicorn daemon Requires=gunicorn.socket After=network.target [Service] User=sammy Group=www-data WorkingDirectory=/home/sammy/myprojectdir ExecStart=/home/sammy/myprojectdir/myprojectenv/bin/gunicorn \\ --access-logfile - \\ --workers 3 \\ --bind unix:/run/gunicorn.sock \\ myproject.wsgi:application [Install] WantedBy=multi-user.target sudo systemctl start gunicorn.socket sudo systemctl enable gunicorn.socket Checking for the Gunicorn Socket File sudo systemctl status gunicorn.socket file /run/gunicorn.sock ############################output################### /run/gunicorn.sock: socket sudo journalctl -u gunicorn.socket Testing Socket Activation sudo systemctl status gunicorn curl --unix-socket /run/gunicorn.sock localhost sudo systemctl status gunicorn sudo journalctl -u gunicorn sudo systemctl daemon-reload sudo systemctl restart gunicorn Configure Nginx to Proxy Pass to Gunicorn sudo nano /etc/nginx/sites-available/myproject ################################################## server { listen 80; server_name server_domain_or_IP; location = /favicon.ico { access_log off; log_not_found off; } location /static/ { root /home/sammy/myprojectdir; } location / { include proxy_params; proxy_pass http://unix:/run/gunicorn.sock; } } sudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled nginx -t sudo systemctl restart nginx sudo ufw delete allow 8000 sudo ufw allow \u0026#39;Nginx Full\u0026#39; https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-debian-11\n","permalink":"https://leijingwei.com/posts/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-debian-11/","summary":"Installing the Packages from the Debian Repositories sudo apt update sudo apt install python3-venv python3-dev libpq-dev postgresql postgresql-contrib nginx curl Creating the PostgreSQL Database and User sudo -u postgres psql CREATE DATABASE myproject; CREATE USER myprojectuser WITH PASSWORD \u0026#39;password\u0026#39;; ALTER ROLE myprojectuser SET client_encoding TO \u0026#39;utf8\u0026#39;; ALTER ROLE myprojectuser SET default_transaction_isolation TO \u0026#39;read committed\u0026#39;; ALTER ROLE myprojectuser SET timezone TO \u0026#39;UTC\u0026#39;; GRANT ALL PRIVILEGES ON DATABASE myproject TO myprojectuser; \\q Creating a Python Virtual Environment for your Project mkdir ~/myprojectdir cd ~/myprojectdir python3 -m venv myprojectenv source myprojectenv/bin/activate pip install django gunicorn psycopg2-binary Creating and Configuring a New Django Project django-admin startproject myproject ~/myprojectdir nano ~/myprojectdir/myproject/settings.","title":"How To Set Up Django with Postgres, Nginx, and Gunicorn on Debian 11"},{"content":"Before you install your proxy app on Aliyun ECS, you should do something to block the aliyun\u0026rsquo;s built-in services.\nrm -rf /etc/motd \u0026amp;\u0026gt;/dev/null rm -fr /usr/local/{aegis,qcloud,cloudmonitor} \u0026amp;\u0026gt;/dev/null rm -rf /lib/systemd/system/aliyun.service \u0026amp;\u0026gt;/dev/null mkdir /usr/local/{aegis,cloudmonitor,qcloud} killall -9 sgagent \u0026amp;\u0026gt;/dev/null killall -9 barad_agent \u0026amp;\u0026gt;/dev/null killall -9 aliyun_assist_update \u0026amp;\u0026gt;/dev/null killall -9 aliyun_assist_update \u0026amp;\u0026gt;/dev/null killall -9 AliSecureCheckAdvanced \u0026amp;\u0026gt;/dev/null killall -9 CmsGoAgent.linux-amd64 \u0026amp;\u0026gt;/dev/null kill -9 `pidof YDLive` \u0026amp;\u0026gt;/dev/null kill -9 `pidof YDService` \u0026amp;\u0026gt;/dev/null kill -9 `pidof wrapper` \u0026amp;\u0026gt;/dev/null kill -9 `pidof AliYunDun` \u0026amp;\u0026gt;/dev/null kill -9 `pidof AliYunDunUpdate` \u0026amp;\u0026gt;/dev/null Don\u0026rsquo;t forget to enable your firewall to block the untrust access.\nI am using the ufw to controll the firewall rules.\napt install ufw ufw enable vi /etc/default/ufw # make sure IPV6=yes is actived ufw default deny incoming # default deny all incoming connecttion ufw default allow outgoing # default allow all outgoing connection ufw allow 22/tcp # this is very important, don\u0026#39;t forget this. after you do some basic configurations with the ufw, you should block all Aliyun\u0026rsquo;s IPs.\nvi /etc/ufw/before.rules find ** # End required lines** , add the following contents into it.\n-A ufw-before-input -s 140.205.201.0/24 -j DROP -A ufw-before-input -s 140.205.201.0/28 -j DROP -A ufw-before-input -s 140.205.201.16/29 -j DROP -A ufw-before-input -s 140.205.201.32/28 -j DROP -A ufw-before-input -s 140.205.225.0/24 -j DROP -A ufw-before-input -s 140.205.225.192/29 -j DROP -A ufw-before-input -s 140.205.225.200/30 -j DROP -A ufw-before-input -s 140.205.225.184/29 -j DROP -A ufw-before-input -s 140.205.225.183/32 -j DROP -A ufw-before-input -s 140.205.225.206/32 -j DROP -A ufw-before-input -s 140.205.225.205/32 -j DROP -A ufw-before-input -s 140.205.225.195/32 -j DROP -A ufw-before-input -s 140.205.225.204/32 -j DROP -A ufw-before-input -s 106.11.224.0/26 -j DROP -A ufw-before-input -s 106.11.224.64/26 -j DROP -A ufw-before-input -s 106.11.224.128/26 -j DROP -A ufw-before-input -s 106.11.224.192/26 -j DROP -A ufw-before-input -s 106.11.222.64/26 -j DROP -A ufw-before-input -s 106.11.222.128/26 -j DROP -A ufw-before-input -s 106.11.222.192/26 -j DROP -A ufw-before-input -s 106.11.223.0/26 -j DROP -A ufw-before-input -s 112.124.127.224 -j DROP -A ufw-before-input -s 112.124.127.44 -j DROP -A ufw-before-input -s 112.124.127.64 -j DROP -A ufw-before-input -s 112.124.127.53 -j DROP -A ufw-before-input -s 120.26.216.168 -j DROP -A ufw-before-input -s 120.26.64.126 -j DROP -A ufw-before-input -s 121.43.107.174 -j DROP -A ufw-before-input -s 121.43.107.176 -j DROP -A ufw-before-input -s 121.41.117.242 -j DROP -A ufw-before-input -s 121.40.130.38 -j DROP -A ufw-before-input -s 121.41.112.148 -j DROP -A ufw-before-input -s 115.29.112.222 -j DROP -A ufw-before-input -s 115.28.203.70 -j DROP -A ufw-before-input -s 42.96.189.63 -j DROP -A ufw-before-input -s 115.29.113.101 -j DROP -A ufw-before-input -s 120.27.40.113 -j DROP -A ufw-before-input -s 115.28.171.22 -j DROP -A ufw-before-input -s 115.28.189.208 -j DROP -A ufw-before-input -s 121.42.196.232 -j DROP -A ufw-before-input -s 115.28.26.13 -j DROP -A ufw-before-input -s 120.27.47.144 -j DROP -A ufw-before-input -s 120.27.47.33 -j DROP -A ufw-before-input -s 112.126.74.55 -j DROP -A ufw-before-input -s 182.92.148.207 -j DROP -A ufw-before-input -s 182.92.1.233 -j DROP -A ufw-before-input -s 112.126.73.56 -j DROP -A ufw-before-input -s 123.56.138.37 -j DROP -A ufw-before-input -s 123.57.10.133 -j DROP -A ufw-before-input -s 112.126.75.174 -j DROP -A ufw-before-input -s 182.92.157.118 -j DROP -A ufw-before-input -s 112.126.75.221 -j DROP -A ufw-before-input -s 182.92.69.212 -j DROP -A ufw-before-input -s 10.153.174.11 -j DROP -A ufw-before-input -s 10.153.175.147 -j DROP -A ufw-before-input -s 10.153.175.146 -j DROP -A ufw-before-input -s 110.75.0.0/16 -j DROP -A ufw-before-input -s 42.120.0.0/16 -j DROP don\u0026rsquo;f forget reload your firewall with ufw.\nufw reload Now you can do anything you want.\n","permalink":"https://leijingwei.com/posts/remove-and-block-aliyun/","summary":"Before you install your proxy app on Aliyun ECS, you should do something to block the aliyun\u0026rsquo;s built-in services.\nrm -rf /etc/motd \u0026amp;\u0026gt;/dev/null rm -fr /usr/local/{aegis,qcloud,cloudmonitor} \u0026amp;\u0026gt;/dev/null rm -rf /lib/systemd/system/aliyun.service \u0026amp;\u0026gt;/dev/null mkdir /usr/local/{aegis,cloudmonitor,qcloud} killall -9 sgagent \u0026amp;\u0026gt;/dev/null killall -9 barad_agent \u0026amp;\u0026gt;/dev/null killall -9 aliyun_assist_update \u0026amp;\u0026gt;/dev/null killall -9 aliyun_assist_update \u0026amp;\u0026gt;/dev/null killall -9 AliSecureCheckAdvanced \u0026amp;\u0026gt;/dev/null killall -9 CmsGoAgent.linux-amd64 \u0026amp;\u0026gt;/dev/null kill -9 `pidof YDLive` \u0026amp;\u0026gt;/dev/null kill -9 `pidof YDService` \u0026amp;\u0026gt;/dev/null kill -9 `pidof wrapper` \u0026amp;\u0026gt;/dev/null kill -9 `pidof AliYunDun` \u0026amp;\u0026gt;/dev/null kill -9 `pidof AliYunDunUpdate` \u0026amp;\u0026gt;/dev/null Don\u0026rsquo;t forget to enable your firewall to block the untrust access.","title":"Remove and Block Aliyun"},{"content":"ffmpeg -version ffmpeg -i input.mp3 -t 30 output.mp3 ffmpeg -i input.mp3 -ss 00:00:04 -t 30 output.mp3 ","permalink":"https://leijingwei.com/posts/how-to-use-ffmpeg/","summary":"ffmpeg -version ffmpeg -i input.mp3 -t 30 output.mp3 ffmpeg -i input.mp3 -ss 00:00:04 -t 30 output.mp3 ","title":"How to Use Ffmpeg"},{"content":"hugo installlation brew install hugo hugo create site hugo new site leijingwei # a folder leijingwei will be created with a config.toml file hugo new site leijingwei -f yml # a folder leijingwei will be created with a config.yml file add a theme to your site Go to the https://themes.gohugo.io/ , find your favourite theme.\nhugo create post You will use this command to create a new post.\nhugo new posts/new-post.md And you will use the following contents to edit your post.\ntitle: \u0026#34;A New Start\u0026#34; draft: true author: \u0026#34;Jingwei Lei\u0026#34; date: 2022-10-07T01:45:59+08:00 description: \u0026#34;This is description\u0026#34; tags: [\u0026#34;markdown\u0026#34;, \u0026#34;css\u0026#34;, \u0026#34;html\u0026#34;, \u0026#34;themes\u0026#34;] categories: [\u0026#34;themes\u0026#34;, \u0026#34;syntax\u0026#34;] series: [\u0026#34;Themes Guide\u0026#34;] aliases: [\u0026#34;migrate-from-jekyl\u0026#34;] ShowToc: true TocOpen: true hugo generate static files hugo -D other hugo commands hugo server -D ","permalink":"https://leijingwei.com/posts/hugo-quick-start/","summary":"hugo installlation brew install hugo hugo create site hugo new site leijingwei # a folder leijingwei will be created with a config.toml file hugo new site leijingwei -f yml # a folder leijingwei will be created with a config.yml file add a theme to your site Go to the https://themes.gohugo.io/ , find your favourite theme.\nhugo create post You will use this command to create a new post.\nhugo new posts/new-post.","title":"Hugo Quick Start"},{"content":"Step 1 Create the RSA Key Pair The first step is to create a key pair on the client machine (usually your computer):\nssh-keygen By default ssh-keygen will create a 3072-bit RSA key pair, which is secure enough for most use cases (you may optionally pass in the -b 4096 flag to create a larger 4096-bit key).\nAfter entering the command, you should see the following output:\nOutputGenerating public/private rsa key pair. Enter file in which to save the key (/your_home/.ssh/id_rsa): Press enter to save the key pair into the .ssh/ subdirectory in your home directory, or specify an alternate path.\nIf you had previously generated an SSH key pair, you may see the following prompt:\nOutput/home/your_home/.ssh/id_rsa already exists. Overwrite (y/n)? Warning: If you choose to overwrite the key on disk, you will not be able to authenticate using the previous key anymore. Be very careful when selecting yes, as this is a destructive process that cannot be reversed.\nYou should then see the following prompt:\nOutputEnter passphrase (empty for no passphrase): Here you optionally may enter a secure passphrase, which is highly recommended. A passphrase adds an additional layer of security to prevent unauthorized users from logging in. To learn more about security, consult our tutorial on How To Configure SSH Key-Based Authentication on a Linux Server.\nYou should then see the following output:\nOutputYour identification has been saved in /your_home/.ssh/id_rsa. Your public key has been saved in /your_home/.ssh/id_rsa.pub. The key fingerprint is: SHA256:5E2BtTN9FHPBNoRXAB/EdjtHNYOHzTBzG5qUv7S3hyM root@debian-suricata The key\u0026#39;s randomart image is: +---[RSA 3072]----+ | oo .O^XB| | . +.BO%B| | . = .+B+o| | o o o . =.| | S . . =| | o.| | .o| | E o..| | . ..| +----[SHA256]-----+ You now have a public and private key that you can use to authenticate. The next step is to place the public key on your server so that you can use SSH-key-based authentication to log in.\nStep 2 - Copy the Public Key to Debian Server The quickest way to copy your public key to the Debian host is to use a utility called ssh-copy-id. Due to its simplicity, this method is highly recommended if available. If you do not have ssh-copy-id available to you on your client machine, you may use one of the two alternate methods provided in this section (copying via password-based SSH, or manually copying the key).\nCopying Public Key Using ssh-copy-id The ssh-copy-id tool is included by default in many operating systems, so you may have it available on your local system. For this method to work, you must already have password-based SSH access to your server.\nTo use the utility, you simply need to specify the remote host that you would like to connect to and the user account that you have password SSH access to. This is the account to which your public SSH key will be copied.\nThe syntax is:\nssh-copy-id username@remote_host You may see the following message:\nOutputThe authenticity of host \u0026#39;203.0.113.1 (203.0.113.1)\u0026#39; can\u0026#39;t be established. ECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe. Are you sure you want to continue connecting (yes/no)? yes This means that your local computer does not recognize the remote host. This will happen the first time you connect to a new host. Type “yes” and press ENTER to continue.\nNext, the utility will scan your local account for the id_rsa.pub key that we created earlier. When it finds the key, it will prompt you for the password of the remote user’s account:\nOutput/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys username@203.0.113.1\u0026#39;s password: Type in the password (your typing will not be displayed for security purposes) and press ENTER. The utility will connect to the account on the remote host using the password you provided. It will then copy the contents of your ~/.ssh/id_rsa.pub key into a file in the remote account’s home ~/.ssh directory called authorized_keys.\nYou should see the following output:\nOutputNumber of key(s) added: 1 Now try logging into the machine, with: \u0026#34;ssh \u0026#39;username@203.0.113.1\u0026#39;\u0026#34; and check to make sure that only the key(s) you wanted were added. At this point, your id_rsa.pub key has been uploaded to the remote account. You can continue on to Step 3.\nCopying Public Key Using SSH If you do not have ssh-copy-id available, but you have password-based SSH access to an account on your server, you can upload your keys using a conventional SSH method.\nWe can do this by using the cat command to read the contents of the public SSH key on our local computer and piping that through an SSH connection to the remote server.\nOn the other side, we can make sure that the ~/.ssh directory exists and has the correct permissions under the account we’re using.\nWe can then output the content we piped over into a file called authorized_keys within this directory. We’ll use the \u0026gt;\u0026gt; redirect symbol to append the content instead of overwriting it. This will let us add keys without destroying previously added keys.\nThe full command looks like this:\ncat ~/.ssh/id_rsa.pub | ssh username@remote_host \u0026#34;mkdir -p ~/.ssh \u0026amp;\u0026amp; touch ~/.ssh/authorized_keys \u0026amp;\u0026amp; chmod -R go= ~/.ssh \u0026amp;\u0026amp; cat \u0026gt;\u0026gt; ~/.ssh/authorized_keys\u0026#34; You may see the following message:\nOutputThe authenticity of host \u0026#39;203.0.113.1 (203.0.113.1)\u0026#39; can\u0026#39;t be established. ECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe. Are you sure you want to continue connecting (yes/no)? yes This means that your local computer does not recognize the remote host. This will happen the first time you connect to a new host. Type “yes” and press ENTER to continue.\nAfterwards, you should be prompted to enter the remote user account password:\nOutputusername@203.0.113.1\u0026#39;s password: After entering your password, the content of your id_rsa.pub key will be copied to the end of the authorized_keys file of the remote user’s account. Continue on to Step 3 if this was successful.\nCopying Public Key Manually If you do not have password-based SSH access to your server available, you will have to complete the above process manually.\nWe will manually append the content of your id_rsa.pub file to the ~/.ssh/authorized_keys file on your remote machine.\nTo display the content of your id_rsa.pub key, type this into your local computer:\ncat ~/.ssh/id_rsa.pub You will see the key’s content, which should look something like this:\nOutputssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDgkLJ8d2gGEJCN7xdyVaDqk8qgeZqQ0MlfoPK3TzWI5dkG0WiZ16jrkiW/h6lhO9K1w89VDMnmNN9ULOWHrZMNs//Qyv/oN+FLIgK2CkKXRxTmbh/ZGnqOm3Zo2eU+QAmjb8hSsstQ3DiuGu8tbiWmsa3k3jKbWNWpXqY3Q88t+bM1DZrHwYzaIZ1BSA1ghqHCvIZqeP9IUL2l2DUfSCT9LXJEgMQhgjakJnzEGPgd5VHMR32rVrbIbbDzlyyoZ7SpCe5y0vYvbV2JKWI/8SEOmwehEHJ9RBZmciwc+1sdEcAJVMDujb9p5rX4hyvFpG0KGhZesB+/s7PdOa8zlIg4TZhXUHl4t1jpPC83Y9KEwS/Ni4dhaxlnr3T6l5hUX2cD+eWl1vVpogBqKNGBMrVR4dWs3Z4BVUf9exqTRRYOfgo0UckULqW5pmLW07JUuGo1kpFAxpDBPFWoPsg08CGRdEUS7ScRnMK1KdcH54kUZr0O88SZOsv9Zily/A5GyNM= demo@test Access your remote host using whichever method you have available.\nOnce you have access to your account on the remote server, you should make sure the ~/.ssh directory exists. This command will create the directory if necessary, or do nothing if it already exists:\nmkdir -p ~/.ssh Now, you can create or modify the authorized_keys file within this directory. You can add the contents of your id_rsa.pub file to the end of the authorized_keys file, creating it if necessary, using this command:\necho public_key_string \u0026gt;\u0026gt; ~/.ssh/authorized_keys In the above command, substitute the public_key_string with the output from the cat ~/.ssh/id_rsa.pub command that you executed on your local system. It should start with ssh-rsa AAAA....\nFinally, we’ll ensure that the ~/.ssh directory and authorized_keys file have the appropriate permissions set:\nchmod -R go= ~/.ssh This recursively removes all “group” and “other” permissions for the ~/.ssh/ directory.\nIf you’re using the root account to set up keys for a user account, it’s also important that the ~/.ssh directory belongs to the user and not to root:\nchown -R sammy:sammy ~/.ssh In this tutorial our user is named sammy but you should substitute the appropriate username into the above command.\nYou can now attempt passwordless authentication with your Debian server.\nStep 3 — Authenticate to Debian Server Using SSH Keys If you have successfully completed one of the procedures above, you should be able to log into the remote host without the remote account’s password.\nThe general process is the same:\nssh username@remote_host If this is your first time connecting to this host (if you used the last method above), you may see something like this:\nOutputThe authenticity of host \u0026#39;203.0.113.1 (203.0.113.1)\u0026#39; can\u0026#39;t be established. ECDSA key fingerprint is fd:fd:d4:f9:77:fe:73:84:e1:55:00:ad:d6:6d:22:fe. Are you sure you want to continue connecting (yes/no)? yes This means that your local computer does not recognize the remote host. Type “yes” and then press ENTER to continue.\nIf you did not supply a passphrase for your private key, you will be logged in immediately. If you supplied a passphrase for the private key when you created the key, you will be prompted to enter it now (note that your keystrokes will not display in the terminal session for security). After authenticating, a new shell session should open for you with the configured account on the Debian server.\nIf key-based authentication was successful, continue on to learn how to further secure your system by disabling password authentication.\nStep 4 — Disable Password Authentication on your Server If you were able to log into your account using SSH without a password, you have successfully configured SSH-key-based authentication to your account. However, your password-based authentication mechanism is still active, meaning that your server is still exposed to brute-force attacks.\nBefore completing the steps in this section, make sure that you either have SSH-key-based authentication configured for the root account on this server, or preferably, that you have SSH-key-based authentication configured for a non-root account on this server with sudo privileges. This step will lock down password-based logins, so ensuring that you will still be able to get administrative access is crucial.\nOnce you’ve confirmed that your remote account has administrative privileges, log into your remote server with SSH keys, either as root or with an account with sudo privileges. Then, open up the SSH daemon’s configuration file:\nsudo nano /etc/ssh/sshd_config Inside the file, search for a directive called PasswordAuthentication. This may be commented out. Uncomment the line and set the value to “no”. This will disable your ability to log in via SSH using account passwords:\n/etc/ssh/sshd_config\n... PasswordAuthentication no ... Save and close the file when you are finished by pressing CTRL + X, then Y to confirm saving the file, and finally ENTER to exit nano. To actually implement these changes, we need to restart the sshd service:\nsudo systemctl restart ssh As a precaution, open up a new terminal window and test that the SSH service is functioning correctly before closing this session:\nssh username@remote_host Once you have verified your SSH service, you can safely close all current server sessions.\nThe SSH daemon on your Debian server now only responds to SSH keys. Password-based authentication has successfully been disabled.\nConclusion You should now have SSH-key-based authentication configured on your server, allowing you to sign in without providing an account password.\n","permalink":"https://leijingwei.com/posts/how-to-set-up-ssh-keys-on-debian-11/","summary":"Step 1 Create the RSA Key Pair The first step is to create a key pair on the client machine (usually your computer):\nssh-keygen By default ssh-keygen will create a 3072-bit RSA key pair, which is secure enough for most use cases (you may optionally pass in the -b 4096 flag to create a larger 4096-bit key).\nAfter entering the command, you should see the following output:\nOutputGenerating public/private rsa key pair.","title":"How to set up ssh keys on debian 11"},{"content":"Basic Usage gunicorn [OPTIONS] [WSGI_APP] The general format of WSGI_APP here is the module name plus the variable name. After version 20.1.0, this place became a config file. For example: the file name is test.py\ndef app(environ, start_response): \u0026#34;\u0026#34;\u0026#34;Simplest possible application object\u0026#34;\u0026#34;\u0026#34; data = b\u0026#39;Hello, World!\\n\u0026#39; status = \u0026#39;200 OK\u0026#39; response_headers = [ (\u0026#39;Content-type\u0026#39;, \u0026#39;text/plain\u0026#39;), (\u0026#39;Content-Length\u0026#39;, str(len(data))) ] start_response(status, response_headers) return iter([data]) At this point you want to start the program with the following command:\ngunicorn --workers=2 test:app The variable name here can also be a function call. For example, the above example can be changed to this:\ndef create_app(): app = FrameworkApp() ... return app Calling it like this has the same effect:\ngunicorn --workers=2 \u0026#39;test:create_app()\u0026#39; Common configuration parameters -c CONFIG, \u0026ndash;config=CONFIG [Define the path to the configuration file] -b BIND, \u0026ndash;bind=BIND [Define the server communication address and port] -w WORKERS, \u0026ndash;workers=WORKERS [Define the number of worker processes, which is about 2-4 per CPU configuration] -k WORKERCLASS \u0026ndash;worker-class=WORKERCLASS [What type of worker process to run. Can be set to one of (sync, eventlet, gevent, tornado, gthread.sync).] -n APP_NAME, \u0026ndash;name=APP_NAME [If enabled, you can set the process name.] For other parameters, please refer to the official documentation. Intergration Django If not defined, gunicorn will automatically call a WSGI application, such as a typical Django program. The format of gunicorn is as follows:\ngunicorn myproject.wsgi It\u0026rsquo;s pretty easy to deploy. It should be noted above that your project should be in the python PATH. The easiest way is to put it in the same directory as manage.py in the Django directory.\nThere is also a configuration, which can directly configure the content in Django settings:\ngunicorn --env DJANGO_SETTINGS_MODULE=myproject.settings myproject.wsgi Paste and deployment gunicorn --paste development.ini -b :8080 --chdir /path/to/project gunicorn --paste development.ini#admin -b :8080 --chdir /path/to/project ","permalink":"https://leijingwei.com/posts/gunicorn-running/","summary":"Basic Usage gunicorn [OPTIONS] [WSGI_APP] The general format of WSGI_APP here is the module name plus the variable name. After version 20.1.0, this place became a config file. For example: the file name is test.py\ndef app(environ, start_response): \u0026#34;\u0026#34;\u0026#34;Simplest possible application object\u0026#34;\u0026#34;\u0026#34; data = b\u0026#39;Hello, World!\\n\u0026#39; status = \u0026#39;200 OK\u0026#39; response_headers = [ (\u0026#39;Content-type\u0026#39;, \u0026#39;text/plain\u0026#39;), (\u0026#39;Content-Length\u0026#39;, str(len(data))) ] start_response(status, response_headers) return iter([data]) At this point you want to start the program with the following command:","title":"03 Gunicorn running"},{"content":"Installation Requirement ：Python 3.x \u0026gt;= 3.5 Install the latest gunicorn with the command as below：\npip install gunicorn Installation from source code pip install git+https://github.com/benoitc/gunicorn.git Installation DEV version from source code\npip install -U git+https://github.com/benoitc/gunicorn.git Async Workers If your application code may need to pause for a long time during request processing, you may also need to install Eventlet or Gevent. Check out the design documentation for details on when one of the other assist types needs to be considered.\n$ pip install greenlet # Required for both $ pip install eventlet # For eventlet workers $ pip install gunicorn[eventlet] # Or, using extra $ pip install gevent # For gevent workers $ pip install gunicorn[gevent] # Or, using extra Both will automatically install greenlet. If the installation fails, check if python-dev or libevent is installed.\nExtra package Some gunicorn options require additional package files, which you can install with [extra] when installing gunicorn.\ngunicorn[eventlet] - Eventlet-based greenlets workers gunicorn[gevent] - Gevent-based greenlets workers gunicorn[gthread] - Threaded workers gunicorn[tornado] - Tornado-based workers, not recommended（不推荐） If you run more than one instance of gunicorn, proc_name can help you to distinguish between ps or top commands.\ngunicorn[setproctitle] - set the name of the process You can use several expansion packs together, as follows: pip install gunicorn[gevent,setproctitle] ","permalink":"https://leijingwei.com/posts/gunicorn-installation/","summary":"Installation Requirement ：Python 3.x \u0026gt;= 3.5 Install the latest gunicorn with the command as below：\npip install gunicorn Installation from source code pip install git+https://github.com/benoitc/gunicorn.git Installation DEV version from source code\npip install -U git+https://github.com/benoitc/gunicorn.git Async Workers If your application code may need to pause for a long time during request processing, you may also need to install Eventlet or Gevent. Check out the design documentation for details on when one of the other assist types needs to be considered.","title":"02 Gunicorn installation"},{"content":"About Gunicorn is the abbreviation of Green Unicorn, a WSGI Http server for Python under Unix systems. Its advantage is that it is relatively simple and easy to use on other web frameworks, such as flask, Django, etc.\nInstall \u0026amp; Start pip install gunicorn Install gunicorn using the above command, then write a simple python script to start the service\n# myapp.py def app(environ, start_response): data = b\u0026#34;Hello, World!\\n\u0026#34; start_response(\u0026#34;200 OK\u0026#34;,[(\u0026#34;Content-Type\u0026#34;,\u0026#34;text/plain\u0026#34;),(\u0026#34;Content-Length\u0026#34;,str(len(data)))]) return iter([data]) # Start： gunicorn -w 4 myapp:app Console output：\n[2021-04-11 20:59:22 +0800] [32842] [INFO] Starting gunicorn 20.1.0 [2021-04-11 20:59:22 +0800] [32842] [INFO] Listening at: http://127.0.0.1:8000 (32842) [2021-04-11 20:59:22 +0800] [32842] [INFO] Using worker: sync [2021-04-11 20:59:22 +0800] [32844] [INFO] Booting worker with pid: 32844 [2021-04-11 20:59:22 +0800] [32845] [INFO] Booting worker with pid: 32845 [2021-04-11 20:59:22 +0800] [32846] [INFO] Booting worker with pid: 32846 [2021-04-11 20:59:22 +0800] [32847] [INFO] Booting worker with pid: 32847 Deploy Gunicorn is a WSGI HTTP server. When using Gunicorn, it is best to put it behind an HTTP proxy server. The official recommendation is to use Nginx. A simple Nginx configuration is as follows:\nserver { listen 80; server_name example.org; access_log /var/log/nginx/example.log; location / { proxy_pass http://127.0.0.1:8000; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } Here, Nginx is set up as a reverse proxy server for the Gunicorn server running on localhost port 8000.\n","permalink":"https://leijingwei.com/posts/the-usage-of-gunicorn/","summary":"About Gunicorn is the abbreviation of Green Unicorn, a WSGI Http server for Python under Unix systems. Its advantage is that it is relatively simple and easy to use on other web frameworks, such as flask, Django, etc.\nInstall \u0026amp; Start pip install gunicorn Install gunicorn using the above command, then write a simple python script to start the service\n# myapp.py def app(environ, start_response): data = b\u0026#34;Hello, World!\\n\u0026#34; start_response(\u0026#34;200 OK\u0026#34;,[(\u0026#34;Content-Type\u0026#34;,\u0026#34;text/plain\u0026#34;),(\u0026#34;Content-Length\u0026#34;,str(len(data)))]) return iter([data]) # Start： gunicorn -w 4 myapp:app Console output：","title":"01 Gunicorn quick start"},{"content":"I can not write this in Chinese , but I really want to write it down .\nfirst please get an ECS or VPS which can visit the world outside of the wall.\nCentOS 7.x + Debian Ubuntu 18.x + i choose Cent OS 8.3, so the following content is based on Cent OS 8.\nsecond download the installation script by this command.\ncurl -O https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh then you will get a file which named \u0026lsquo;install-release.sh\u0026rsquo;\nrun this script.\nbash install-release.sh third after the installation , we should do some configuration for v2ray.\nadd the v2ray service to startup list systemctl enable v2ray start the v2ray service systemctl start v2ray fourth at last , we should config our server and client.\nunluckly , most people don\u0026rsquo;t know how to set the configration file. Actually , there is no need to know too much about it , you just need to know how to copy and modify my code.\nfor server the config.json file is located in /usr/local/etc/v2ray/ here.\n{ \u0026#34;log\u0026#34;:{ \u0026#34;loglevel\u0026#34;:\u0026#34;warnning\u0026#34;, \u0026#34;access\u0026#34;:\u0026#34;/var/log/v2ray/access.log\u0026#34;, \u0026#34;error\u0026#34;:\u0026#34;/var/log/v2ray/error.log\u0026#34; }, \u0026#34;inbounds\u0026#34;: [ { \u0026#34;port\u0026#34;: 1027, \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;clients\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;39f91024-f331-46d8-90e5-4046a05bea77\u0026#34;, \u0026#34;alterId\u0026#34;: 64 } ] } } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34;, \u0026#34;settings\u0026#34;: {} } ] } for client { \u0026#34;log\u0026#34;: { \u0026#34;error\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;loglevel\u0026#34;: \u0026#34;info\u0026#34;, \u0026#34;access\u0026#34;: \u0026#34;\u0026#34; }, \u0026#34;inbounds\u0026#34;: [ { \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;socks\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;udp\u0026#34;: false, \u0026#34;auth\u0026#34;: \u0026#34;noauth\u0026#34; }, \u0026#34;port\u0026#34;: \u0026#34;1080\u0026#34; }, { \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;protocol\u0026#34;: \u0026#34;http\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;timeout\u0026#34;: 360 }, \u0026#34;port\u0026#34;: \u0026#34;1087\u0026#34; } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;mux\u0026#34;: { \u0026#34;enabled\u0026#34;: false, \u0026#34;concurrency\u0026#34;: 8 }, \u0026#34;protocol\u0026#34;: \u0026#34;vmess\u0026#34;, \u0026#34;streamSettings\u0026#34;: { \u0026#34;tcpSettings\u0026#34;: { \u0026#34;header\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;none\u0026#34; } }, \u0026#34;tlsSettings\u0026#34;: { \u0026#34;allowInsecure\u0026#34;: true }, \u0026#34;security\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;network\u0026#34;: \u0026#34;tcp\u0026#34; }, \u0026#34;tag\u0026#34;: \u0026#34;proxy\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;vnext\u0026#34;: [ { \u0026#34;address\u0026#34;: \u0026#34;8.210.228.39\u0026#34;, \u0026#34;users\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;39f91024-f331-46d8-90e5-4046a05bea77\u0026#34;, \u0026#34;alterId\u0026#34;: 64, \u0026#34;level\u0026#34;: 0, \u0026#34;security\u0026#34;: \u0026#34;auto\u0026#34; } ], \u0026#34;port\u0026#34;: 1027 } ] } } ], \u0026#34;dns\u0026#34;: {}, \u0026#34;routing\u0026#34;: { \u0026#34;settings\u0026#34;: { \u0026#34;domainStrategy\u0026#34;: \u0026#34;AsIs\u0026#34;, \u0026#34;rules\u0026#34;: [] } }, \u0026#34;transport\u0026#34;: {} } you just need to change the id ,port and IP address to your owns, but make sure that client are the same with server.\nto get the uuid ,you can use this command on Cent OS.\ncat /proc/sys/kernel/random/uuid or you can visit the website to get one uuid.\nuuid generator\nfifth done.\n","permalink":"https://leijingwei.com/posts/install-v2ray/","summary":"I can not write this in Chinese , but I really want to write it down .\nfirst please get an ECS or VPS which can visit the world outside of the wall.\nCentOS 7.x + Debian Ubuntu 18.x + i choose Cent OS 8.3, so the following content is based on Cent OS 8.\nsecond download the installation script by this command.\ncurl -O https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh then you will get a file which named \u0026lsquo;install-release.","title":"Install V2ray"},{"content":"Add the repo of University of Science and Technology of China vim /etc/yum.repos.d/nginx.repo Add the contents to the file：\n[nginx-mainline] name=nginx mainline repo baseurl=http://mirrors.ustc.edu.cn/nginx/mainline/centos/$releasever/$basearch/ gpgcheck=0 enabled=1 module_hotfixes=true Update the nginx yum update nginx Check the version of the nginx nginx -v ","permalink":"https://leijingwei.com/posts/nginx-update-centos8/","summary":"Add the repo of University of Science and Technology of China vim /etc/yum.repos.d/nginx.repo Add the contents to the file：\n[nginx-mainline] name=nginx mainline repo baseurl=http://mirrors.ustc.edu.cn/nginx/mainline/centos/$releasever/$basearch/ gpgcheck=0 enabled=1 module_hotfixes=true Update the nginx yum update nginx Check the version of the nginx nginx -v ","title":"CentOS 8.3 upgrade default nginx"}]